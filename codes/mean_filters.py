# -*- coding: utf-8 -*-
"""mean filters.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UHI6Prz1SlR-sm__W65EBLV_JdAcSni4
"""

!apt-get -qq install -y libsm6 libxext6 && pip install -q -U opencv-python
import cv2
from PIL import Image
from google.colab.patches import cv2_imshow

import numpy as np
import pandas as pd
import cv2

# 2
mosque= cv2.imread("mosque.bmp")
mosque = cv2.cvtColor(mosque,cv2.COLOR_BGR2GRAY)

def robert_filter(image):

  robert_Xfilter = np.array([[1,0],[0,-1]])
  robert_Xfilter = np.array([[0,1],[-1,0]])

  Gx = np.zeros((image.shape[0],image.shape[1]))
  Gy = np.zeros((image.shape[0],image.shape[1]))

  for i in range(image.shape[0]):
    for j in range(image.shape[1]):
      Gx[i][j] = (robert_Xfilter * image[i:i+2,j:j+2]).sum()
      Gy[i][j] = (robert_Xfilter * image[i:i+2,j:j+2]).sum()

  G = np.sqrt(np.power(Gx,2)+np.power(Gy,2))
  
  return G


def mean_filter(image,n):

  mean_filter = np.ones((n,n))/(n*n)
  G = np.zeros((image.shape[0],image.shape[1]))

  for i in range(image.shape[0]):
    if image.shape[0] - i < n:
      break
    for j in range(image.shape[1]):
      if image.shape[1] - j < n:
        break
      G[i][j] = (mean_filter * image[i:i+n,j:j+n]).sum()

  return G 

mosque_robert = robert_filter(mosque)
cv2_imshow(mosque_robert)

mosque_mean_3 = mean_filter(mosque,3)
mosque_mean_3_robert = robert_filter(mosque_mean_3)
cv2_imshow(mosque_mean_3_robert)

mosque_mean_5 = mean_filter(mosque,5)
mosque_mean_5_robert = robert_filter(mosque_mean_5)
cv2_imshow(mosque_mean_5_robert)

mosque_mean_7 = mean_filter(mosque,7)
cv2_imshow(mosque_mean_7)
mosque_mean_7_robert = robert_filter(mosque_mean_7)
cv2_imshow(mosque_mean_7_robert)


def psedu_mean_nx_filter(image,n):

  if n == 5:
    mean_filter =  (np.array([[1,2,3,2,1],
                            [2,4,6,4,2],
                            [3,6,9,6,3],
                            [2,4,6,4,2],
                            [1,2,3,2,1]]))/81
  elif n == 7:  
        mean_filter =  (np.array([[1,3,6,7,6,3,1],
                            [3,9,18,21,18,9,3],
                            [6,18,36,42,36,18,6],
                            [7,21,42,49,42,21,7],
                            [6,18,36,42,36,18,6],
                            [3,9,18,21,18,9,3],
                            [1,3,6,7,6,3,1]])/729) 

  G = np.zeros((488,695))

  for i in range(image.shape[0]):
    if image.shape[0] - i < n:
      break
    for j in range(image.shape[1]):
      if image.shape[1] - j < n:
        break
      G[i][j] = (mean_filter * image[i:i+n,j:j+n]).sum()

  return G 




mosque_mean_3 = mean_filter(mosque,3)
mosque_mean_3_2x = mean_filter(mosque_mean_3,3)
cv2_imshow(mosque_mean_3_2x)

mosque_mean_3 = psedu_mean_nx_filter(mosque,5)
cv2_imshow(mosque_mean_3)


mosque_mean_3 = mean_filter(mosque,3)
mosque_mean_3_2x = mean_filter(mosque_mean_3,3)
mosque_mean_3_3x = mean_filter(mosque_mean_3_2x,3)
cv2_imshow(mosque_mean_3_3x)

mosque_mean_7 = psedu_mean_nx_filter(mosque,7)
cv2_imshow(mosque_mean_7)

import tensorflow as tf
tf.test.gpu_device_name()

mean_filter =  (np.array([[1,3,6,7,6,3,1],
                            [3,9,18,21,18,9,3],
                            [6,18,36,42,36,18,6],
                            [7,21,42,49,42,21,7],
                            [6,18,36,42,36,18,6],
                            [3,9,18,21,18,9,3],
                            [1,3,6,7,6,3,1]]))
        mean_filter.sum() 

        x = np.array([[1,2,3,2,1],
                            [2,4,6,4,2],
                            [3,6,9,6,3],
                            [2,4,6,4,2],
                            [1,2,3,2,1]])
        # x.sum()